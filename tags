!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/me/Documents/malloc/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(LIBFT_FILE)	Makefile	/^$(LIBFT_FILE):$/;"	t
$(NAME)	Makefile	/^$(NAME): $(LIBFT_FILE) $(OBJS) $(HEADERS)$/;"	t
$(NAME)	libft/Makefile	/^$(NAME): $(OBJS)$/;"	t
$(OBJS)	Makefile	/^$(OBJS): %.o: %.c $(HEADERS)$/;"	t
$(OBJS)	libft/Makefile	/^$(OBJS): %.o: %.c $(HEADER)$/;"	t
%.o	Makefile	/^$(OBJS): %.o: %.c $(HEADERS)$/;"	t
%.o	libft/Makefile	/^$(OBJS): %.o: %.c $(HEADER)$/;"	t
.PHONY	Makefile	/^.PHONY = all clean fclean re$/;"	m
BUFFER_SIZE	libft/get_next_line.c	/^#define BUFFER_SIZE /;"	d	file:
FLAGS	libft/Makefile	/^FLAGS = -Wall -Wextra -Werror$/;"	m
FT_PRINTF_H	libft/ft_printf.h	/^# define FT_PRINTF_H$/;"	d
GENERIC	Makefile	/^GENERIC = libft_malloc.so$/;"	m
HEADER	libft/Makefile	/^HEADER = libft.h$/;"	m
HEADERS	Makefile	/^HEADERS =	includes\/libft.h \\$/;"	m
HEADERS_DIR	Makefile	/^HEADERS_DIR = includes$/;"	m
HEAP_HEADER_SIZE	includes/ft_malloc.h	/^#define HEAP_HEADER_SIZE /;"	d
HOSTTYPE	Makefile	/^	HOSTTYPE := $(shell uname -m)_$(shell uname -s)$/;"	m
IS_SMALL	includes/ft_malloc.h	/^#define IS_SMALL(/;"	d
IS_TINY	includes/ft_malloc.h	/^#define IS_TINY(/;"	d
IS_USED	includes/ft_malloc.h	/^#define IS_USED(/;"	d
LIBFT_FILE	Makefile	/^LIBFT_FILE = libft\/libft.a$/;"	m
LIBFT_H	includes/libft.h	/^# define LIBFT_H$/;"	d
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
MCHUNKPTR_SIZE	includes/ft_malloc.h	/^#define MCHUNKPTR_SIZE /;"	d
MIN	includes/ft_malloc.h	/^#define MIN /;"	d
NAME	Makefile	/^NAME = libft_malloc_$(HOSTTYPE).so$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
OBJS	Makefile	/^OBJS = ${SRCS:.c=.o}$/;"	m
OBJS	libft/Makefile	/^OBJS = ${SRCS:.c=.o}$/;"	m
SIZE_MASK	includes/ft_malloc.h	/^#define SIZE_MASK /;"	d
SMALL	includes/ft_malloc.h	/^#define SMALL /;"	d
SMALL_HEAP	includes/ft_malloc.h	/^#define SMALL_HEAP /;"	d
SRCS	Makefile	/^SRCS = srcs\/malloc.c \\$/;"	m
SRCS	libft/Makefile	/^SRCS =	ft_isalnum.c \\$/;"	m
TINY	includes/ft_malloc.h	/^#define TINY /;"	d
TINY_HEAP	includes/ft_malloc.h	/^#define TINY_HEAP /;"	d
UNUSED_CHUNK_METADATA_SIZE	includes/ft_malloc.h	/^#define UNUSED_CHUNK_METADATA_SIZE /;"	d
USED_CHUNK	includes/ft_malloc.h	/^#define USED_CHUNK /;"	d
USED_CHUNK_METADATA_SIZE	includes/ft_malloc.h	/^#define USED_CHUNK_METADATA_SIZE /;"	d
align_size	srcs/utils.c	/^size_t	align_size(size_t size)$/;"	f	typeref:typename:size_t
all	Makefile	/^all: $(NAME)$/;"	t
all	libft/Makefile	/^all: $(NAME)$/;"	t
allocate_chunk	srcs/malloc.c	/^void	*allocate_chunk(size_t size)$/;"	f	typeref:typename:void *
bwd	includes/ft_malloc.h	/^	struct unused_chunk	*bwd;$/;"	m	struct:unused_chunk	typeref:struct:unused_chunk *
clean	Makefile	/^clean:$/;"	t
clean	libft/Makefile	/^clean:$/;"	t
conv	libft/ft_printf.h	/^	char	conv;$/;"	m	struct:s_flag	typeref:typename:char
dot	libft/ft_printf/ft_parsing.c	/^static t_flag	dot(va_list params, char *str, t_flag flags, int *i)$/;"	f	typeref:typename:t_flag	file:
empty_str_alloc	libft/ft_strtrim.c	/^static char	*empty_str_alloc(void)$/;"	f	typeref:typename:char *	file:
error	libft/ft_printf.h	/^	bool	error;$/;"	m	struct:s_flag	typeref:typename:bool
fclean	Makefile	/^fclean: clean$/;"	t
fclean	libft/Makefile	/^fclean: clean$/;"	t
filloc_str	libft/ft_split.c	/^static char	*filloc_str(char *s, char c)$/;"	f	typeref:typename:char *	file:
fourtou	libft/get_next_line.c	/^int	fourtou(char **rest, int fd, char *buffer)$/;"	f	typeref:typename:int
free	includes/ft_malloc.h	/^	struct unused_chunk	*free;$/;"	m	struct:lists	typeref:struct:unused_chunk *
free_all	libft/ft_split.c	/^static char	**free_all(char **strs, int j)$/;"	f	typeref:typename:char **	file:
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f	typeref:typename:int
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f	typeref:typename:void *
ft_conv_or_flag	libft/ft_printf/ft_parsing_plus.c	/^int	ft_conv_or_flag(char c)$/;"	f	typeref:typename:int
ft_free	srcs/free.c	/^void	ft_free(void *ptr)$/;"	f	typeref:typename:void
ft_free_all	libft/ft_printf/ft_useful.c	/^int	ft_free_all(const int number, ...)$/;"	f	typeref:typename:int
ft_init_static	libft/ft_printf/ft_parsing_plus.c	/^t_flag	ft_init_static(t_flag flags)$/;"	f	typeref:typename:t_flag
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f	typeref:typename:int
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f	typeref:typename:int
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_malloc	srcs/malloc.c	/^void	*ft_malloc(size_t size)$/;"	f	typeref:typename:void *
ft_memccpy	libft/ft_memccpy.c	/^void	*ft_memccpy(void *dst, const void *src, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f	typeref:typename:int
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f	typeref:typename:void *
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f	typeref:typename:void *
ft_pars_cases	libft/ft_printf/ft_parsing_plus.c	/^t_flag	ft_pars_cases(t_flag flags)$/;"	f	typeref:typename:t_flag
ft_pars_flags	libft/ft_printf/ft_parsing.c	/^t_flag	ft_pars_flags(va_list params, char *str)$/;"	f	typeref:typename:t_flag
ft_print_c	libft/ft_printf/ft_params.c	/^int	ft_print_c(va_list params, t_flag flags)$/;"	f	typeref:typename:int
ft_print_di	libft/ft_printf/ft_params_di.c	/^int	ft_print_di(va_list params, t_flag flags)$/;"	f	typeref:typename:int
ft_print_p	libft/ft_printf/ft_params_p.c	/^int	ft_print_p(va_list params, t_flag flags)$/;"	f	typeref:typename:int
ft_print_param	libft/ft_printf/ft_params.c	/^int	ft_print_param(va_list params, t_flag flags)$/;"	f	typeref:typename:int
ft_print_percent	libft/ft_printf/ft_params.c	/^int	ft_print_percent(t_flag flags)$/;"	f	typeref:typename:int
ft_print_s	libft/ft_printf/ft_params_s.c	/^int	ft_print_s(va_list params, t_flag flags)$/;"	f	typeref:typename:int
ft_print_u	libft/ft_printf/ft_params_uxx.c	/^int	ft_print_u(va_list params, t_flag flags)$/;"	f	typeref:typename:int
ft_print_x_low	libft/ft_printf/ft_params_uxx.c	/^int	ft_print_x_low(va_list params, t_flag flags)$/;"	f	typeref:typename:int
ft_print_x_up	libft/ft_printf/ft_params_uxx.c	/^int	ft_print_x_up(va_list params, t_flag flags)$/;"	f	typeref:typename:int
ft_printf	libft/ft_printf/ft_printf.c	/^int	ft_printf(const char *str, ...)$/;"	f	typeref:typename:int
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strcmp	libft/ft_strcmp.c	/^int	ft_strcmp(const char *s1, const char *s2)$/;"	f	typeref:typename:int
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *src)$/;"	f	typeref:typename:char *
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f	typeref:typename:size_t
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strnchr	libft/ft_strnchr.c	/^char	*ft_strnchr(const char *s, int c, size_t n)$/;"	f	typeref:typename:char *
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strndup	libft/ft_strndup.c	/^char	*ft_strndup(const char *src, unsigned int size)$/;"	f	typeref:typename:char *
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(const char *s1, char const *set)$/;"	f	typeref:typename:char *
ft_substr	libft/ft_substr.c	/^char	*ft_substr(const char *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
ft_uitoa	libft/ft_uitoa.c	/^char	*ft_uitoa(unsigned int n)$/;"	f	typeref:typename:char *
ft_uitox_lowercase	libft/ft_printf/ft_uitox.c	/^char	*ft_uitox_lowercase(unsigned long n)$/;"	f	typeref:typename:char *
ft_uitox_uppercase	libft/ft_printf/ft_uitox.c	/^char	*ft_uitox_uppercase(unsigned long n)$/;"	f	typeref:typename:char *
fwd	includes/ft_malloc.h	/^	struct unused_chunk	*fwd;$/;"	m	struct:unused_chunk	typeref:struct:unused_chunk *
get_free_list	srcs/malloc.c	/^struct unused_chunk	*get_free_list(size_t size)$/;"	f	typeref:struct:unused_chunk *
get_nb_str	libft/ft_split.c	/^static int	get_nb_str(const char *str, char c)$/;"	f	typeref:typename:int	file:
get_new_chunk	srcs/malloc.c	/^struct unused_chunk	*get_new_chunk(size_t size)$/;"	f	typeref:struct:unused_chunk *
get_next_line	libft/get_next_line.c	/^int	get_next_line(int fd, char **line)$/;"	f	typeref:typename:int
get_preallocation_size	srcs/prealloc.c	/^static long	get_preallocation_size(long chunk_size, long page_size)$/;"	f	typeref:typename:long	file:
get_precision	libft/ft_printf/ft_params_di.c	/^static char	*get_precision(char *str, t_flag flags)$/;"	f	typeref:typename:char *	file:
get_precision	libft/ft_printf/ft_params_s.c	/^static char	*get_precision(char *str, t_flag flags)$/;"	f	typeref:typename:char *	file:
get_precision	libft/ft_printf/ft_params_uxx.c	/^static char	*get_precision(char *str, t_flag flags)$/;"	f	typeref:typename:char *	file:
get_size	libft/ft_itoa.c	/^static int	get_size(int n)$/;"	f	typeref:typename:int	file:
get_size	libft/ft_printf/ft_uitox.c	/^static int	get_size(unsigned long n)$/;"	f	typeref:typename:int	file:
get_size	libft/ft_uitoa.c	/^static int	get_size(unsigned int n)$/;"	f	typeref:typename:int	file:
get_width	libft/ft_printf/ft_params_di.c	/^static char	*get_width(char *str, char *prec, t_flag flags, bool neg)$/;"	f	typeref:typename:char *	file:
get_width	libft/ft_printf/ft_params_p.c	/^static char	*get_width(char *str, t_flag flags)$/;"	f	typeref:typename:char *	file:
get_width	libft/ft_printf/ft_params_s.c	/^static char	*get_width(char *str, t_flag flags)$/;"	f	typeref:typename:char *	file:
get_width	libft/ft_printf/ft_params_uxx.c	/^static char	*get_width(char *str, char *prec, t_flag flags)$/;"	f	typeref:typename:char *	file:
gnl_care_rest	libft/get_next_line.c	/^int	gnl_care_rest(char **rest, char **line)$/;"	f	typeref:typename:int
gnl_new_line	libft/get_next_line.c	/^char	*gnl_new_line(char **line, char *buffer)$/;"	f	typeref:typename:char *
gnl_store_rest	libft/get_next_line.c	/^char	*gnl_store_rest(char *rest, char **line)$/;"	f	typeref:typename:char *
heaps	includes/ft_malloc.h	/^	unsigned long		*heaps;$/;"	m	struct:lists	typeref:typename:unsigned long *
initialize_malloc	srcs/init.c	/^int	initialize_malloc(void)$/;"	f	typeref:typename:int
insert_free_list	srcs/free_list.c	/^void	insert_free_list(struct unused_chunk *chunk)$/;"	f	typeref:typename:void
insert_new_chunks	srcs/prealloc.c	/^static void	insert_new_chunks(struct unused_chunk *new_first,$/;"	f	typeref:typename:void	file:
lists	includes/ft_malloc.h	/^struct	lists$/;"	s
lists	srcs/malloc.c	/^struct lists lists;$/;"	v	typeref:struct:lists
m_t	libft/ft_split.c	/^static char	**m_t(char ***str, int size)$/;"	f	typeref:typename:char **	file:
main	test.c	/^int main(void)$/;"	f	typeref:typename:int
minus	libft/ft_printf.h	/^	bool	minus;$/;"	m	struct:s_flag	typeref:typename:bool
mutex	srcs/malloc.c	/^pthread_mutex_t		mutex;$/;"	v	typeref:typename:pthread_mutex_t
nb_precisions	libft/ft_printf.h	/^	int		nb_precisions;$/;"	m	struct:s_flag	typeref:typename:int
nb_width	libft/ft_printf.h	/^	int		nb_width;$/;"	m	struct:s_flag	typeref:typename:int
new_heap_size	srcs/malloc.c	/^size_t	new_heap_size(size_t needed_size, long page_size)$/;"	f	typeref:typename:size_t
normal	libft/ft_memmove.c	/^static void	normal(unsigned char *dst, unsigned char *src, size_t len)$/;"	f	typeref:typename:void	file:
normal_case	libft/ft_putnbr_fd.c	/^static void	normal_case(int n, int fd)$/;"	f	typeref:typename:void	file:
part_of_set	libft/ft_strtrim.c	/^static int	part_of_set(const char *set, char c)$/;"	f	typeref:typename:int	file:
patch_norme	libft/ft_printf/ft_printf.c	/^static int	patch_norme(va_list params, const char *str, size_t i)$/;"	f	typeref:typename:int	file:
plist	.gdbinit	/^define plist$/;"	d
preallocate_heap	srcs/prealloc.c	/^int	preallocate_heap(long page_size, long heap_flag)$/;"	f	typeref:typename:int
precision	libft/ft_printf.h	/^	bool	precision;$/;"	m	struct:s_flag	typeref:typename:bool
prev_size	includes/ft_malloc.h	/^	unsigned long	prev_size;$/;"	m	struct:unused_chunk	typeref:typename:unsigned long
print_all	libft/ft_printf/ft_params_di.c	/^static void	print_all(t_flag flags, bool neg, char *width, char *prec)$/;"	f	typeref:typename:void	file:
print_chunk	srcs/utils.c	/^void	print_chunk(struct unused_chunk *chunk)$/;"	f	typeref:typename:void
print_list	srcs/utils.c	/^void	print_list(struct unused_chunk *chunk)$/;"	f	typeref:typename:void
printing	libft/ft_printf/ft_params_di.c	/^static int	printing(t_flag flags, char *str, char *width, char *prec)$/;"	f	typeref:typename:int	file:
printing	libft/ft_printf/ft_printf.c	/^static int	printing(va_list params, const char *str, size_t i)$/;"	f	typeref:typename:int	file:
re	Makefile	/^re: fclean $(NAME)$/;"	t
re	libft/Makefile	/^re: fclean all$/;"	t
remove_free_list	srcs/free_list.c	/^void	remove_free_list(struct unused_chunk *chunk)$/;"	f	typeref:typename:void
s_flag	libft/ft_printf.h	/^typedef struct s_flag$/;"	s
show_alloc_mem	srcs/heap_list.c	/^void	show_alloc_mem(void)$/;"	f	typeref:typename:void
size	includes/ft_malloc.h	/^	unsigned long	size;$/;"	m	struct:unused_chunk	typeref:typename:unsigned long
split_chunk	srcs/malloc.c	/^void	*split_chunk(void *big_chunk, size_t big_size, size_t size)$/;"	f	typeref:typename:void *
star	libft/ft_printf/ft_parsing.c	/^static t_flag	star(va_list params, t_flag flags, int *i)$/;"	f	typeref:typename:t_flag	file:
star_digit_dot	libft/ft_printf/ft_parsing.c	/^static t_flag	star_digit_dot(va_list params, char *str, t_flag flags, int *i)$/;"	f	typeref:typename:t_flag	file:
t_flag	libft/ft_printf.h	/^}	t_flag;$/;"	t	typeref:struct:s_flag
unused_chunk	includes/ft_malloc.h	/^struct	unused_chunk$/;"	s
width	libft/ft_printf.h	/^	bool	width;$/;"	m	struct:s_flag	typeref:typename:bool
zero	libft/ft_printf.h	/^	bool	zero;$/;"	m	struct:s_flag	typeref:typename:bool
zero_minus_error	libft/ft_printf/ft_parsing.c	/^static t_flag	zero_minus_error(int ret, char *str, t_flag flags, int *i)$/;"	f	typeref:typename:t_flag	file:
